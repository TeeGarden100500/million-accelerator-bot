// üîÅ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º

const fs = require('fs');
const path = require('path');

const defaultTokens = [
  '0xA5E59761eBD4436fa4d20E1A27c8a29FB2471Fc6', // DEGEN
  '0x6982508145454Ce325DdBE47a25d4ec3d2311933', // PEPE
];

const { sendTelegramMessage } = require('../utils/telegram');
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const DEBUG = process.env.DEBUG_LOG_LEVEL === 'debug';
const TOP_TOKENS_FILE = path.join(__dirname, '..', '..', 'data', 'top-tokens.json');

function logDebug(msg) {
  if (DEBUG) console.log(`[SCANNER] ${msg}`);
}

function loadTokensFromFile() {
  try {
    const raw = fs.readFileSync(TOP_TOKENS_FILE, 'utf8');
    const list = JSON.parse(raw);
    if (!Array.isArray(list) || !list.length) {
      logDebug('–§–∞–π–ª top-tokens.json –ø—É—Å—Ç.');
      return [];
    }
    return list;
  } catch (err) {
    logDebug(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å top-tokens.json: ${err.message}`);
    return [];
  }
}

async function scanToken(token) {
  try {
    console.log(`[SCAN] ‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: ${token}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (—ç–º—É–ª—è—Ü–∏—è)
    await delay(1000); // —ç–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    console.log(`[SCAN] ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: ${token}`);
  } catch (err) {
    console.error(`[SCAN ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ ${token}: ${err.message}`);
    await sendTelegramMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞:\n${token}\n\n${err.message}`);
  }
}

let isScanning = false;

async function startTokenScanCycle(tokens = defaultTokens) {
  if (!tokens.length) {
    console.error('[ERROR] –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑.');
    return;
  }

  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤...');
  for (const token of tokens) {
    await scanToken(token);
    await delay(10000); // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
  }
}

function startScheduledTokenScan(initialTokens) {
  console.log('[SCHEDULER] ‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤...');
  const run = async () => {
    if (isScanning) {
      console.warn('[SCHEDULER] ‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.');
      return;
    }

    let tokens = Array.isArray(initialTokens) ? initialTokens : [];
    initialTokens = null;
    if (!tokens.length) {
      tokens = loadTokensFromFile();
      logDebug(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tokens.length} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.`);
    }

    if (!tokens.length) {
      console.warn('[SCHEDULER] ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.');
      return;
    }

    console.log(`[SCHEDULER] üîÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${tokens.length} —Ç–æ–∫–µ–Ω–æ–≤...`);
    isScanning = true;
    try {
      await startTokenScanCycle(tokens);
    } finally {
      isScanning = false;
    }
  };

  run();
  setInterval(run, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}

if (require.main === module) {
  startScheduledTokenScan();
}

module.exports = { scanToken, startTokenScanCycle, startScheduledTokenScan };
