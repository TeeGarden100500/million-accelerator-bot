// üîÅ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º

const defaultTokens = [
  '0xA5E59761eBD4436fa4d20E1A27c8a29FB2471Fc6', // DEGEN
  '0x6982508145454Ce325DdBE47a25d4ec3d2311933', // PEPE
];

const { sendTelegramMessage } = require("../utils/telegram");
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function scanToken(token) {
  try {
    console.log(`[SCAN] ‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: ${token}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (—ç–º—É–ª—è—Ü–∏—è)
    await delay(1000); // —ç–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    console.log(`[SCAN] ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: ${token}`);
  } catch (err) {
    console.error(`[SCAN ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ ${token}: ${err.message}`);
    await sendTelegramMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞:\n${token}\n\n${err.message}`);
  }
}

async function startScannerLoop(tokens = defaultTokens) {
  if (!tokens.length) {
    console.error('[ERROR] –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑.');
    return;
  }

  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤...');
  while (true) {
    for (const token of tokens) {
      await scanToken(token);
      await delay(10000); // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
    }
  }
}

if (require.main === module) {
  startScannerLoop();
}

module.exports = { scanToken, startScannerLoop };
