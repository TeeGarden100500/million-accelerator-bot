const axios = require('axios');
const { sendTelegramMessage, sendTelegramAlert } = require('./telegram');
const { checkPumpSignal } = require('./src/strategies/pumpProfitSniper');
const settings = require('./config/settings');

// –¢–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
const TOKENS = [];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ —á–µ—Ä–µ–∑ Dexscreener
async function analyzeTokens() {
  for (const token of TOKENS) {
    try {
      const url = `https://api.dexscreener.com/latest/dex/tokens/${token.address}`;
      const res = await axios.get(url);

      const data = res.data.pairs?.[0];
      if (!data) continue;

      const volume24h = parseFloat(data.volume?.h24Usd || 0);
      const volume1h = parseFloat(data.volume?.h1Usd || 0);
      const priceChange = parseFloat(data.priceChange?.h1 || 0);
      const prevVolume = volume24h - volume1h;
      const volumeChangePercent = prevVolume > 0 ? (volume1h / prevVolume) * 100 : 0;

      if (volume24h > 10000) {
        await sendTelegramMessage(
          `üí∞ –û–±—ä–µ–º –ø–æ ${token.name}: $${volume24h.toLocaleString()} ‚Äî —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.\nüîó ${data.url}`
        );
      }

      checkPumpSignal({
        symbol: token.name,
        priceChangePercent: priceChange,
        volumeChangePercent,
      });
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${token.name}:`, err.message);
    }
  }
}

module.exports = { analyzeTokens };
