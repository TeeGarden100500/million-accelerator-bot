const tokens = ['0x...', '0x...']; // –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
const delay = (ms) => new Promise(res => setTimeout(res, ms));
const { sendTelegramMessage } = require('../telegram');

const DEBUG = process.env.DEBUG_LOG_LEVEL === 'debug';

function logDebug(message) {
  if (DEBUG) {
    console.log(message);
  }
}

async function scanToken(token) {
  try {
    logDebug(`[SCAN] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: ${token}`);
    // ... –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ ...
    logDebug(`[SCAN] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: ${token}`);
  } catch (err) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ ${token}:`, err.message);
    await sendTelegramMessage(`‚ùóÔ∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: ${token}\n${err.message}`);
  }
}

async function startTokenScanner() {
  if (!tokens.length) {
    console.error('[ERROR] –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑.');
    return;
  }

  while (true) {
    logDebug('üîÅ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤...');
    for (const token of tokens) {
      await scanToken(token);
      await delay(10000); // –ü–∞—É–∑–∞ 10 —Å–µ–∫ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
    }
  }
}

startTokenScanner();
